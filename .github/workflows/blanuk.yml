name: Replace Kernel in boot.img from AK3 Package

on:
  workflow_dispatch:
    inputs:
      boot_img_url:
        description: "URL to download the boot.img file"
        required: true
        type: string
      ak3_url:
        description: "URL to download the AK3 package"
        required: true
        type: string

jobs:
  replace-kernel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download boot.img
        run: |
          curl -L -o boot.img "${{ github.event.inputs.boot_img_url }}"
          if [ ! -f "boot.img" ]; then
            echo "Failed to download boot.img. Exiting."
            exit 1
          fi

      - name: Download AK3 Package
        run: |
          curl -L -o ak3_package.zip "${{ github.event.inputs.ak3_url }}"
          unzip ak3_package.zip -d ak3_folder
          echo "AK3 Package contents:"
          ls ak3_folder

      - name: Extract Image.gz
        run: |
          # 确保解压 Image.gz 文件
          if [ -f "ak3_folder/Image.gz" ]; then
            echo "Extracting Image.gz..."
            gunzip ak3_folder/Image.gz
          else
            echo "Image.gz not found!"
            exit 1
          fi
          
          # 确保解压后的 Image 文件存在
          kernel_file="ak3_folder/Image"
          echo "Kernel file path: $kernel_file"  # 打印变量值，确保路径正确
          if [ ! -f "$kernel_file" ]; then
            echo "Kernel file does not exist after extraction: $kernel_file"
            exit 1
          fi

      - name: Install magiskboot and add to PATH
        run: |
          # 将 magiskboot 添加到系统路径
          mkdir -p /usr/local/bin
          cp magiskboot /usr/local/bin/
          chmod +x /usr/local/bin/magiskboot
          echo "magiskboot installed and added to PATH"
          
          # 确认 magiskboot 是否可以从任何目录调用
          magiskboot --version

      - name: Unpack boot.img to unpacked directory
        run: |
          # 创建 unpacked 目录
          mkdir -p unpacked

          # 输出 boot.img 信息
          echo "Verifying boot.img file:"
          file boot.img

          # 在 unpacked 目录下解包 boot.img
          echo "Running magiskboot unpack to unpacked directory..."
          magiskboot unpack boot.img -d unpacked

          # 输出解包后的文件列表
          echo "Unpacked files in unpacked directory:"
          ls -l unpacked

          # 检查文件是否存在并继续
          if [ ! -f "unpacked/boot.img-ramdisk" ] || [ ! -f "unpacked/boot.img-kernel" ]; then
            echo "Failed to unpack boot.img. Missing files, but continuing with kernel replacement."
          fi

      - name: Replace Kernel in boot.img
        run: |
          echo "Replacing kernel in boot.img with ${kernel_file}"
          # 确保kernel_file变量正确
          if [ ! -f "$kernel_file" ]; then
            echo "Kernel file does not exist at ${kernel_file}!"
            exit 1
          fi
          cp "${kernel_file}" unpacked/boot.img.kernel
          echo "Kernel replacement completed."

      - name: Repack boot.img
        run: |
          echo "Repacking boot.img..."
          magiskboot repack unpacked/boot.img -d unpacked || echo "Magiskboot repack failed, continuing..."
          if [ ! -f "new_boot.img" ]; then
            echo "Failed to repack boot.img. Exiting."
            exit 1
          fi
